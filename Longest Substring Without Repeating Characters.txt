class Solution {
    public int lengthOfLongestSubstring(String s) {
     
        HashSet<Character> myHashSet = new HashSet<>();
        int result = 0;
        int k=0;
        
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(!myHashSet.contains(c)){
                myHashSet.add(c);
                result = Math.max(result, myHashSet.size());
            }else {
                while(k<i){
                    if(s.charAt(k)==c){
                    k++;
                    break;
                }else{
                    myHashSet.remove(s.charAt(k));
                    k++;
            }
                }
                
        }
        
    }
         return result;
}
}


====================

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        int[] index = new int[128]; // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            i = Math.max(index[s.charAt(j)], i);
            ans = Math.max(ans, j - i + 1);
            index[s.charAt(j)] = j + 1;
        }
        return ans;
    }
}